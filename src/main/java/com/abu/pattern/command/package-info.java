/**
 * 命令模式
 * 将请求封装成对象，这可以让你使用不同的请求、队列，或者日志请求来参数化其它对象。命令模式也可以支持撤销操作。
 * 当需要将发出请求的对象和执行请求的对象解耦的时候，使用命令模式。
 * SimpleRemoteControl
 * RemoteControl
 */
package com.abu.pattern.command;

/**
 * 林杰君注释
 * 未来，receiver包下的类是可扩展的
 * command包下的类也是可扩展的
 * 各个receiver 封装控制寄几的方法。public出去给对应的命令调用。
 * <p>
 * <p>
 * <p>
 * 参考网页
 * http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html
 * 在命令模式中，将***一个***请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化
 * ；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作模式或事务模式。
 * 本质：
 * 命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开
 * 。命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。
 * 主要优点：
 * 命令模式的主要优点在于降低请求调用者和请求接收者之间的耦合度；增加新的命令很方便
 * ，而且可以比较容易地设计一个命令队列和宏命令，并方便地实现对请求的撤销和恢复
 * 简而言之：1、降低调用与接受者之间的耦合
 *           2、容易实现宏命令（命令模式与组合模式联用的产物）
 *           3、容易实现命令的撤销与恢复
 *           缺点：可能导致过多的ConcreteCommand(一个reciver的一个行为，对应一个命令)
 * ；其主要缺点在于可能会导致某些系统有过多的具体命令类。
 * <p>
 * 命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者***相关联***。
 * <p>
 * ConcreteCommand与ConcreteReciver应该说是耦合的。
 * 命令封装的重点不在于封装复杂内容，而在于封装可能错在的琐碎内容。
 */


/**
 * ConcreteCommand与ConcreteReciver应该说是耦合的。
 * 命令封装的重点不在于封装复杂内容，而在于封装可能错在的琐碎内容。
 *
 */