/**
 * 工厂模式
 * 简单工厂
 * 工厂方法:定义了一个创建对象的接口,由子类[决定]实例化的类.工厂方法让类把实例化推迟到子类.[决定由子类的选择与子类方法的实现2者体现]
 * createPizza工厂方法通过继承来实现
 * 抽象工厂:
 *      提供一个接口,用于创建相关或依赖对象的家族,而不需要明确指定具体类
 *      工厂通过继承和组合的方式来实现
 *      产品族：是指由***同一个***工厂生产的，位于不同产品等级结构中的一组产品，
 *      产品等级结构 ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机
 *
 *
 */
/**
 * 林杰君测试
 * 抽象工厂的明显缺点：
 * 1、开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。
 * 2、在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品
 * ，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合
 * ，要支持新种类的产品就意味着要对该接口进行扩展
 * ，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。
 */
package com.abu.pattern.factory;
