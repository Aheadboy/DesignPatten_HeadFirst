/**
 * 观察者模式
 * 在对象之间定义一对多的依赖
 * 当一个对象改变状态，依赖他的对象都会收到通知，并自动更新
 *
 *
 * Push最新的数据给所有的观察者；
 * 这样的方式，可以避免具体观察者类跟具体被观察者类的耦合；
 * 但是，Observable在状态更新后，不仅要广播更新动作，还要广播被更新的数据；
 *
 *
 *通过Observer自己去pull感兴趣的数据，那么就要求Observe持有Observable的引用；这里产生了具体类之间的耦合。（这里的耦合是可以接受的）
 * 好处是：Observable不需要去广播所有更新的数据，而仅仅只是广播：我更新了。具体更新什么，Observer感兴趣什么自己来取，Observable有相应的接口来暴露观察者感兴趣的数据；
 *
 * MVC是一种观察者模式，当数据更新之后，所有注册的界面都会自动更新
 */
package com.abu.pattern.observer;
